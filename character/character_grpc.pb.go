// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: proto/character.proto

package character

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Characters_Create_FullMethodName = "/character.Characters/Create"
	Characters_Get_FullMethodName    = "/character.Characters/Get"
	Characters_Delete_FullMethodName = "/character.Characters/Delete"
	Characters_Update_FullMethodName = "/character.Characters/Update"
	Characters_GetAll_FullMethodName = "/character.Characters/GetAll"
)

// CharactersClient is the client API for Characters service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CharactersClient interface {
	Create(ctx context.Context, in *CharCreateReq, opts ...grpc.CallOption) (*CharCreateRes, error)
	Get(ctx context.Context, in *CharGetReq, opts ...grpc.CallOption) (*CharGetRes, error)
	Delete(ctx context.Context, in *CharDeleteReq, opts ...grpc.CallOption) (*CharDeleteRes, error)
	Update(ctx context.Context, in *CharUpdateReq, opts ...grpc.CallOption) (*CharUpdateRes, error)
	GetAll(ctx context.Context, in *GetAllReq, opts ...grpc.CallOption) (Characters_GetAllClient, error)
}

type charactersClient struct {
	cc grpc.ClientConnInterface
}

func NewCharactersClient(cc grpc.ClientConnInterface) CharactersClient {
	return &charactersClient{cc}
}

func (c *charactersClient) Create(ctx context.Context, in *CharCreateReq, opts ...grpc.CallOption) (*CharCreateRes, error) {
	out := new(CharCreateRes)
	err := c.cc.Invoke(ctx, Characters_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charactersClient) Get(ctx context.Context, in *CharGetReq, opts ...grpc.CallOption) (*CharGetRes, error) {
	out := new(CharGetRes)
	err := c.cc.Invoke(ctx, Characters_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charactersClient) Delete(ctx context.Context, in *CharDeleteReq, opts ...grpc.CallOption) (*CharDeleteRes, error) {
	out := new(CharDeleteRes)
	err := c.cc.Invoke(ctx, Characters_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charactersClient) Update(ctx context.Context, in *CharUpdateReq, opts ...grpc.CallOption) (*CharUpdateRes, error) {
	out := new(CharUpdateRes)
	err := c.cc.Invoke(ctx, Characters_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charactersClient) GetAll(ctx context.Context, in *GetAllReq, opts ...grpc.CallOption) (Characters_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &Characters_ServiceDesc.Streams[0], Characters_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &charactersGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Characters_GetAllClient interface {
	Recv() (*GetAllRes, error)
	grpc.ClientStream
}

type charactersGetAllClient struct {
	grpc.ClientStream
}

func (x *charactersGetAllClient) Recv() (*GetAllRes, error) {
	m := new(GetAllRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CharactersServer is the server API for Characters service.
// All implementations must embed UnimplementedCharactersServer
// for forward compatibility
type CharactersServer interface {
	Create(context.Context, *CharCreateReq) (*CharCreateRes, error)
	Get(context.Context, *CharGetReq) (*CharGetRes, error)
	Delete(context.Context, *CharDeleteReq) (*CharDeleteRes, error)
	Update(context.Context, *CharUpdateReq) (*CharUpdateRes, error)
	GetAll(*GetAllReq, Characters_GetAllServer) error
	mustEmbedUnimplementedCharactersServer()
}

// UnimplementedCharactersServer must be embedded to have forward compatible implementations.
type UnimplementedCharactersServer struct {
}

func (UnimplementedCharactersServer) Create(context.Context, *CharCreateReq) (*CharCreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCharactersServer) Get(context.Context, *CharGetReq) (*CharGetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCharactersServer) Delete(context.Context, *CharDeleteReq) (*CharDeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCharactersServer) Update(context.Context, *CharUpdateReq) (*CharUpdateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCharactersServer) GetAll(*GetAllReq, Characters_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedCharactersServer) mustEmbedUnimplementedCharactersServer() {}

// UnsafeCharactersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CharactersServer will
// result in compilation errors.
type UnsafeCharactersServer interface {
	mustEmbedUnimplementedCharactersServer()
}

func RegisterCharactersServer(s grpc.ServiceRegistrar, srv CharactersServer) {
	s.RegisterService(&Characters_ServiceDesc, srv)
}

func _Characters_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharactersServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Characters_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharactersServer).Create(ctx, req.(*CharCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Characters_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharactersServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Characters_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharactersServer).Get(ctx, req.(*CharGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Characters_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharactersServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Characters_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharactersServer).Delete(ctx, req.(*CharDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Characters_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharactersServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Characters_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharactersServer).Update(ctx, req.(*CharUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Characters_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CharactersServer).GetAll(m, &charactersGetAllServer{stream})
}

type Characters_GetAllServer interface {
	Send(*GetAllRes) error
	grpc.ServerStream
}

type charactersGetAllServer struct {
	grpc.ServerStream
}

func (x *charactersGetAllServer) Send(m *GetAllRes) error {
	return x.ServerStream.SendMsg(m)
}

// Characters_ServiceDesc is the grpc.ServiceDesc for Characters service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Characters_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "character.Characters",
	HandlerType: (*CharactersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Characters_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Characters_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Characters_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Characters_Update_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _Characters_GetAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/character.proto",
}
