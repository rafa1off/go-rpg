// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: proto/character.proto

package character

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Characters_Create_FullMethodName = "/character.Characters/Create"
	Characters_Get_FullMethodName    = "/character.Characters/Get"
	Characters_Delete_FullMethodName = "/character.Characters/Delete"
	Characters_Update_FullMethodName = "/character.Characters/Update"
	Characters_GetAll_FullMethodName = "/character.Characters/GetAll"
)

// CharactersClient is the client API for Characters service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CharactersClient interface {
	Create(ctx context.Context, in *Character, opts ...grpc.CallOption) (*Info, error)
	Get(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Character, error)
	Delete(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Info, error)
	Update(ctx context.Context, in *CharEdit, opts ...grpc.CallOption) (*Character, error)
	GetAll(ctx context.Context, in *DB, opts ...grpc.CallOption) (*CharList, error)
}

type charactersClient struct {
	cc grpc.ClientConnInterface
}

func NewCharactersClient(cc grpc.ClientConnInterface) CharactersClient {
	return &charactersClient{cc}
}

func (c *charactersClient) Create(ctx context.Context, in *Character, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := c.cc.Invoke(ctx, Characters_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charactersClient) Get(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Character, error) {
	out := new(Character)
	err := c.cc.Invoke(ctx, Characters_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charactersClient) Delete(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := c.cc.Invoke(ctx, Characters_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charactersClient) Update(ctx context.Context, in *CharEdit, opts ...grpc.CallOption) (*Character, error) {
	out := new(Character)
	err := c.cc.Invoke(ctx, Characters_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charactersClient) GetAll(ctx context.Context, in *DB, opts ...grpc.CallOption) (*CharList, error) {
	out := new(CharList)
	err := c.cc.Invoke(ctx, Characters_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CharactersServer is the server API for Characters service.
// All implementations must embed UnimplementedCharactersServer
// for forward compatibility
type CharactersServer interface {
	Create(context.Context, *Character) (*Info, error)
	Get(context.Context, *Identifier) (*Character, error)
	Delete(context.Context, *Identifier) (*Info, error)
	Update(context.Context, *CharEdit) (*Character, error)
	GetAll(context.Context, *DB) (*CharList, error)
	mustEmbedUnimplementedCharactersServer()
}

// UnimplementedCharactersServer must be embedded to have forward compatible implementations.
type UnimplementedCharactersServer struct {
}

func (UnimplementedCharactersServer) Create(context.Context, *Character) (*Info, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCharactersServer) Get(context.Context, *Identifier) (*Character, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCharactersServer) Delete(context.Context, *Identifier) (*Info, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCharactersServer) Update(context.Context, *CharEdit) (*Character, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCharactersServer) GetAll(context.Context, *DB) (*CharList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedCharactersServer) mustEmbedUnimplementedCharactersServer() {}

// UnsafeCharactersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CharactersServer will
// result in compilation errors.
type UnsafeCharactersServer interface {
	mustEmbedUnimplementedCharactersServer()
}

func RegisterCharactersServer(s grpc.ServiceRegistrar, srv CharactersServer) {
	s.RegisterService(&Characters_ServiceDesc, srv)
}

func _Characters_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Character)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharactersServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Characters_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharactersServer).Create(ctx, req.(*Character))
	}
	return interceptor(ctx, in, info, handler)
}

func _Characters_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharactersServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Characters_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharactersServer).Get(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Characters_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharactersServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Characters_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharactersServer).Delete(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Characters_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharEdit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharactersServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Characters_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharactersServer).Update(ctx, req.(*CharEdit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Characters_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharactersServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Characters_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharactersServer).GetAll(ctx, req.(*DB))
	}
	return interceptor(ctx, in, info, handler)
}

// Characters_ServiceDesc is the grpc.ServiceDesc for Characters service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Characters_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "character.Characters",
	HandlerType: (*CharactersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Characters_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Characters_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Characters_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Characters_Update_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _Characters_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/character.proto",
}
