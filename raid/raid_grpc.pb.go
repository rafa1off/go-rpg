// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: proto/raid.proto

package raid

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Raids_Create_FullMethodName = "/raid.Raids/Create"
	Raids_Get_FullMethodName    = "/raid.Raids/Get"
	Raids_Enter_FullMethodName  = "/raid.Raids/Enter"
	Raids_Leave_FullMethodName  = "/raid.Raids/Leave"
)

// RaidsClient is the client API for Raids service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaidsClient interface {
	Create(ctx context.Context, in *Raid, opts ...grpc.CallOption) (*Info, error)
	Get(ctx context.Context, in *RaidIn, opts ...grpc.CallOption) (*RaidOut, error)
	Enter(ctx context.Context, opts ...grpc.CallOption) (Raids_EnterClient, error)
	Leave(ctx context.Context, in *RaidIn, opts ...grpc.CallOption) (*Info, error)
}

type raidsClient struct {
	cc grpc.ClientConnInterface
}

func NewRaidsClient(cc grpc.ClientConnInterface) RaidsClient {
	return &raidsClient{cc}
}

func (c *raidsClient) Create(ctx context.Context, in *Raid, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := c.cc.Invoke(ctx, Raids_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raidsClient) Get(ctx context.Context, in *RaidIn, opts ...grpc.CallOption) (*RaidOut, error) {
	out := new(RaidOut)
	err := c.cc.Invoke(ctx, Raids_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raidsClient) Enter(ctx context.Context, opts ...grpc.CallOption) (Raids_EnterClient, error) {
	stream, err := c.cc.NewStream(ctx, &Raids_ServiceDesc.Streams[0], Raids_Enter_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &raidsEnterClient{stream}
	return x, nil
}

type Raids_EnterClient interface {
	Send(*Entry) error
	Recv() (*Info, error)
	grpc.ClientStream
}

type raidsEnterClient struct {
	grpc.ClientStream
}

func (x *raidsEnterClient) Send(m *Entry) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raidsEnterClient) Recv() (*Info, error) {
	m := new(Info)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *raidsClient) Leave(ctx context.Context, in *RaidIn, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := c.cc.Invoke(ctx, Raids_Leave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaidsServer is the server API for Raids service.
// All implementations must embed UnimplementedRaidsServer
// for forward compatibility
type RaidsServer interface {
	Create(context.Context, *Raid) (*Info, error)
	Get(context.Context, *RaidIn) (*RaidOut, error)
	Enter(Raids_EnterServer) error
	Leave(context.Context, *RaidIn) (*Info, error)
	mustEmbedUnimplementedRaidsServer()
}

// UnimplementedRaidsServer must be embedded to have forward compatible implementations.
type UnimplementedRaidsServer struct {
}

func (UnimplementedRaidsServer) Create(context.Context, *Raid) (*Info, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRaidsServer) Get(context.Context, *RaidIn) (*RaidOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRaidsServer) Enter(Raids_EnterServer) error {
	return status.Errorf(codes.Unimplemented, "method Enter not implemented")
}
func (UnimplementedRaidsServer) Leave(context.Context, *RaidIn) (*Info, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedRaidsServer) mustEmbedUnimplementedRaidsServer() {}

// UnsafeRaidsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaidsServer will
// result in compilation errors.
type UnsafeRaidsServer interface {
	mustEmbedUnimplementedRaidsServer()
}

func RegisterRaidsServer(s grpc.ServiceRegistrar, srv RaidsServer) {
	s.RegisterService(&Raids_ServiceDesc, srv)
}

func _Raids_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Raid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaidsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Raids_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaidsServer).Create(ctx, req.(*Raid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raids_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaidIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaidsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Raids_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaidsServer).Get(ctx, req.(*RaidIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raids_Enter_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaidsServer).Enter(&raidsEnterServer{stream})
}

type Raids_EnterServer interface {
	Send(*Info) error
	Recv() (*Entry, error)
	grpc.ServerStream
}

type raidsEnterServer struct {
	grpc.ServerStream
}

func (x *raidsEnterServer) Send(m *Info) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raidsEnterServer) Recv() (*Entry, error) {
	m := new(Entry)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Raids_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaidIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaidsServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Raids_Leave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaidsServer).Leave(ctx, req.(*RaidIn))
	}
	return interceptor(ctx, in, info, handler)
}

// Raids_ServiceDesc is the grpc.ServiceDesc for Raids service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Raids_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raid.Raids",
	HandlerType: (*RaidsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Raids_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Raids_Get_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _Raids_Leave_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Enter",
			Handler:       _Raids_Enter_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/raid.proto",
}
